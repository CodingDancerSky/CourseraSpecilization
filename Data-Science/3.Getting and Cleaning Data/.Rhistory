source("rankall.R")
install.packages("swirl")
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
x
submit(x)
boring_function(x)
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
info()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
submit()
submit()
submit()
submit()
submit()
submit()
hand_2 <- parse_card("8h 3d 9c Qs 9h")
ranks <- c(2:10,"J","K","Q","A")
evaluate.hand(hand_f)
## Poker.R
## Evaluate poker hands
##
## by: Christopher Bare
############################################################
## define suits and ranks
suits <- c('c','d','h','s')
ranks <- c(2:10,"J","K","Q","A")
suit_names <- c(c="clubs", d="diamonds", h="hearts", s="spades")
rank_names <- c(2:10, "Jack", "Queen", "King", "Ace")
new.deck <- function() {
deck <- list()
i <- 1
for (r in 2:14) {
for (s in suits) {
deck[[i]] <- list(rank=r, suit=s)
class(deck[[i]]) <- 'card'
i <- i + 1
}
}
class(deck) <- 'cardList'
return(deck)
}
deal <- function(deck,n) {
hand <- sample(deck,n)
hand <- hand[order(rank(hand),suit(hand), decreasing=TRUE)]
class(hand) <- "cardList"
return(hand)
}
is.card <- function(x) {
return(class(x)=='card')
}
suit <- function(c) {
if (is.card(c))
c$suit
else if (is.list(c))
sapply(c, suit)
}
rank <- function(c) {
if (is.card(c))
c$rank
else if (is.list(c))
sapply(c, rank)
}
toString.rank <- function(rank, short=TRUE, plural=FALSE) {
if (short)
result <- ranks[rank-1]
else
result <- rank_names[rank-1]
if (plural)
result <- paste(result,"s",sep="")
return(result)
}
as.rank <- function(s) {
sapply(s, function(x) which(ranks==toupper(x))) + 1
}
parse_card <- function(string) {
card_strings <- strsplit(string,"\\s+")[[1]]
# extract rank and suit from each card into parallel vectors
card_ranks <- as.rank(sub(
pattern="(\\d+|[AKQJ])[cdhs]",
replacement="\\1",
card_strings, ignore.case=TRUE))
card_suits <- sub(
pattern="(\\d+|[AKQJ])([cdhs])",
replacement="\\2",
card_strings, ignore.case=TRUE)
# zip together ranks and suits into cards
cards <- mapply(function(r,s) {
card <- list(rank=r,suit=s)
class(card) <- "card"
card
}, card_ranks, card_suits, SIMPLIFY=FALSE)
class(cards) <- "cardList"
return(cards)
}
toString.card <- function(card) {
paste(toString.rank(rank(card)), suit(card), sep="")
}
toString.cardList <- function(cards) {
paste(toString.card(cards), collapse=" ")
}
toString.pokerHandEvaluation <- function(ev) {
ev$string
}
print.cardList <- function(cards) {
cat("cards:\n")
print(toString.cardList(cards))
}
print.card <- function(card) {
print(toString.card(card))
}
print.pokerHandEvaluation <- function(ev) {
print(ev$string)
}
evaluate.hand <- function(hand) {
runs <- table(rank(hand))
runs <- runs[order(runs, names(runs), decreasing=TRUE)]
run.ranks <- as.numeric(names(runs))
flush.suit <- unique(suit(hand))
is.flush <- (length(flush.suit) == 1)
highest.rank <- max(rank(hand))
lowest.rank <- min(rank(hand))
is.straight <- all(sort(rank(hand))==seq(lowest.rank, lowest.rank+4, 1))
ev <-list(runs=runs,
run.ranks=run.ranks,
flush.suit=flush.suit,
is.flush=is.flush,
highest.rank=highest.rank,
lowest.rank=lowest.rank,
is.straight=is.straight)
class(ev) <- "pokerHandEvaluation"
## straight flush
if (is.straight && is.flush) {
ev$type <- "Straight flush"
if (lowest.rank==10)
ev$string <- paste("Royal flush in", suit_names[flush.suit])
else
ev$string <- paste("Straight flush",
toString.rank(highest.rank), "high",
"in", suit_names[flush.suit])
}
## four of a kind
else if (length(runs)==2 && all(runs==c(4,1))) {
ev$type <- "Four of a kind"
ev$string <- paste("4", toString.rank(run.ranks[1], plural=T))
}
## full house
else if (length(runs)==2 && all(runs==c(3,2))) {
ev$type <- "Full house"
ev$string <- paste("Full house",
toString.rank(run.ranks[1], plural=T), "and",
toString.rank(run.ranks[2], plural=T))
}
## flush
else if (is.flush) {
ev$type <- "Flush"
ev$string <- paste("Flush in", suit_names[flush.suit])
}
## straight
else if (is.straight) {
ev$type <- "Straight"
ev$string <- paste("Straight", toString.rank(highest.rank), "high")
}
## three of a kind
else if (length(runs)==3 && all(runs==c(3,1,1))) {
ev$type <- "Three of a kind"
ev$string <- paste("3", toString.rank(run.ranks[1], plural=T))
}
## two pairs
else if (length(runs)==3 && all(runs==c(2,2,1))) {
ev$type <- "Two pairs"
ev$string <- paste("two pairs",
toString.rank(run.ranks[1], plural=T), "and",
toString.rank(run.ranks[2], plural=T))
}
## pair
else if (length(runs)==4 && all(runs==c(2,1,1,1))) {
ev$type <- "Pair"
ev$string <- paste("pair of", toString.rank(run.ranks[1], plural=T))
}
else {
ev$type <- "Nothing"
ev$string <- paste("Nothing:", toString(hand))
}
return(ev)
}
## deal a bunch of hands and evaluate them
count.hands <- function(n=10) {
d <- new.deck()
counts <- c(`Straight flush`=0,
`Four of a kind`=0,
`Full house`=0,
`Flush`=0,
`Straight`=0,
`Three of a kind`=0,
`Two pairs`=0,
`Pair`=0,
`Nothing`=0)
for (i in 1:n) {
hand <- deal(d,5)
ev <- evaluate.hand(hand)
counts[[ev$type]] <- counts[[ev$type]] + 1
#print(paste(toString(hand), " - ", ev$string))
}
return(counts)
}
hand_s <- parse_card("5h 7d 9s 6c 8")
library(swirl)
swirl()
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, count)
arrange(counts, count)
arrange(cran, count)
top_counts_sorted <- arrange(cran, count)
?arrange
top_counts_sorted <- arrange(cran, count)
skip()
swirl()
top_counts_sorted <- arrange(cran, decs(count))
top_counts_sorted <- arrange(cran, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(by_package, desc(count))
info()
main()
library(dplyr)
tbl_df()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
tbl
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count > 679 )
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
?
%>%
cran
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
names(cran)
submit()
mutate(cran, size_mb = size / 2^20)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
?gather
gather(students2, sex_class, count, -grade)
gather(students2, sex_class, count, res)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class").)
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
reset()
submit()
students3
submit()
spread()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status, value)
mutate(passed,status, "passed")
mutate(passed, "status", "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12,1975")
mmd("March 12,1975")
myd("March 12,1975")
mdy("March 12,1975")
mdy("March 12,1975")
ymd(mdy("March 12,1975"))
y <- mdy("March 12,1975")
info()
skip()
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("192012",OR)
?ymd
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now()
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
new_interval(arrive, last_time)
?new_interval
how_long <- new_interval(arrive, last_time)
how_long <- new_interval(arrive, last_time, tzone = attr(start, "tzone")
how_long <- new_interval(arrive, last_time, tzone = attr(start, "tzone"))
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch(how_long)
stopwatch()
getwd()
}
## full description: http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
## data source: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
setwd("Desktop/Course/12.Big Data/Data Science/Getting and Cleaning Data")
# 1. Merges the training and the test sets to create one data set.
bind <- function(trainFile, testFile){
tmp1 <- read.table(paste("UCI HAR Dataset/train/", trainFile, sep = ""))
tmp2 <- read.table(paste("UCI HAR Dataset/test/", testFile, sep = ""))
r <- rbind(tmp1, tmp2)
r
}
X <- bind("X_train.txt", "X_test.txt")
S <- bind("subject_train.txt", "subject_test.txt")
Y <- bind("y_train.txt", "y_test.txt")
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
keepfeatures <- grep("-mean\\(\\)|-std\\(\\)", features$V2, perl=TRUE)
X <- X[, keepfeatures]
names(X) <- features[keepfeatures, 2]
names(X) <- gsub("\\(|\\)", "", names(X))
names(X) <- tolower(names(X))
# 3. Uses descriptive activity names to name the activities in the data set.
activities <- read.table("UCI HAR Dataset/activity_labels.txt")
activities$V2 = gsub("_", "", tolower(as.character(activities$V2)))
Y$V1 = activities[Y$V1, 2]
names(Y) <- "activity"
# 4. Appropriately labels the data set with descriptive activity names.
names(S) <- "subject"
tidyData <- cbind(S, Y, X)
write.table(tidyData, "tidyData.txt")
# 5. Creates a seconnd, independent tidy data set with the average of each variable for each activity and each subject.
average <- aggregate(x = tidyData,
by = list(activities = tidyData$activity,
subject = tidyData$subject),
FUN = mean)
str(average)
write.table(average, 'averageData.txt')
